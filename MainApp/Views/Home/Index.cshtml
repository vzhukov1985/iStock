@{
    Layout = "_ListOfPricelistsLayout";
    ViewData["Title"] = "Список поставщиков";
}
<div class="row text-left ml-5 align-content-end" style="height: 20%;">
    <div class="row">
        <div>
            <h1 class="display-3 mb-0" style="line-height: 90%;">iStock</h1>
            <p style="font-size:small; line-height: 100%; margin-top: 0px;">Система парсинга прайс-листов</p>
        </div>
    </div>
</div>

<div class="row mt-4" style="max-height:60%">
    <div class="col">
        <p class="mb-1 ml-2">Список прайс-листов:</p>
        <div id="pricelists-table"></div>
    </div>
</div>


<div class="row mt-2 px-0">
    <div class="col">
        <button type="button" id="btnView" class="btn btn-primary mr-2 btn-home" disabled>Просмотреть</button>
        <button type="button" id="btnShowSettings" class="btn btn-warning mr-2 btn-home" data-toggle="modal" data-target="#plSettingsModal" disabled>Настройки</button>
        <button type="button" id="btnPull" class="btn btn-success mr-2 btn-home" disabled>Загрузить</button>
        <button type="button" id="btnPullAll" class="btn btn-success mr-2" style="width:140px">Загрузить все</button>
        <button type="button" id="btnPush" class="btn btn-success mr-2 btn-home" disabled>Выгрузить</button>
        <button type="button" id="btnPushAll" class="btn btn-success mr-2" style="width:140px" disabled>Выгрузить все</button>
        <button type="button" id="btnDownloadXLS" class="btn btn-success mr-2 btn-home" data-toggle="modal" data-target="#downloadXLSModal" disabled>Скачать XLS</button>
        <button type="button" id="btnSearchSku" class="btn btn-primary mr-2" data-toggle="modal" data-target="#searchSkuModal">Поиск по SKU</button>
    </div>
</div>

<div class="modal fade" id="searchSkuModal" tabindex="-1" role="dialog" aria-labelledby="searchSkuModalModalTitle" aria-hidden="true">
    <div class="modal-dialog modal-sm modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="searchSkuModalModalTitle">Поиск по SKU</h5>
                <button id="searchSkuModalHeader" type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <div class="modal-body">
                <div class="row justify-content-center">
                    <div class="col-12 d-inline-flex">
                        <label for="inpSku" class="text-nowrap mr-2" style="margin-top:2px;">SKU:</label>
                        <input type="text" class="form-control form-control-sm" id="inpSku" required>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button id="btnStartSearchSku" type="button" class="btn btn-primary">Поиск</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Отмена</button>
            </div>
        </div>
    </div>
</div>


@await Html.PartialAsync("_PlDownloadXLSModal")
@await Html.PartialAsync("_PlSettingsModal")

@section Scripts
{
    <script>
        var controllerName;
        window.addEventListener("pageshow", function (event) {
            var historyTraversal = event.persisted ||
                (typeof window.performance != "undefined" &&
                    window.performance.navigation.type === 2);
            if (historyTraversal) {
                // Handle page restore.
                setTimeout(setInitialInfo, 200);
            }
        });


        var updatePullStatusTimer;

        var table = new Tabulator("#pricelists-table", {
            maxHeight: "100%",
            ajaxURL: "/pricelists/getallbrief",
            layout: "fitColumns",
            headerSortElement: "&#9650;",
            selectable: "1",
            selectableRangeMode: "click",
            dataLoaded: setInitialInfo,
            columns: [
                { title: "Поставщик", field: "supplierName" },
                { title: "Название", field: "name" },
                { title: "Последняя загрузка", field: "lastPull", formatter: nullDateFormatter },
                { title: "Непроверенных наименований", field: "itemsToVerify", formatter: itemsToVerifyFormatter }
            ],
            rowClick: function (e, row) {
                controllerName = row.getData()['controller'];
                if (row.getData()['isPulling'] == false) {
                    enableButtons();
                }
                else {
                    disableButtons();
                }
            },
            rowDblClick: function (e, row) {
                if (row.getData()['isPulling'] == false) {
                    window.location = table.getSelectedData()[0].controller;
                }
            }
        });

        function setInitialInfo() {
            intervalUpdate();
            table.getData().forEach(function (value, index, array) {
                $.ajax({
                    type: 'GET',
                    url: "/" + value['controller'] + "/getItemsToVerifyCount/",
                    datatype: "json",
                    success: function (response) {
                        table.updateData([{ id: value['id'], itemsToVerify: response }]);
                    }
                });
            })
            setInterval(intervalUpdate, 2000);
        }

        function intervalUpdate() {
            table.getData().forEach(function (value, index, array) {
                $.ajax({
                    type: 'GET',
                    url: "/" + value['controller'] + "/pull/ispulling/",
                    async: true,
                    datatype: "json",
                    success: function (response) {
                        if (response) {
                            table.updateData([{ id: value['id'], isPulling: true }])
                            $.ajax({
                                type: 'GET',
                                async: true,
                                url: "/" + value['controller'] + "/pull/pullrecsprocessed/",
                                datatype: "json",
                                success: function (response) {
                                    if (response == 0) {
                                        table.updateData([{ id: value['id'], lastPull: "Скачивание... " }])
                                    }
                                    else if (response > 0) {
                                        table.updateData([{ id: value['id'], lastPull: "Загрузка... " + response + " записей загружено" }])
                                    }
                                    else {
                                        table.updateData([{ id: value['id'], lastPull: "Обработка данных..." }])
                                    }
                                }
                            });
                        }
                        else {
                            table.updateData([{ id: value['id'], isPulling: false }])
                            $.ajax({
                                type: 'GET',
                                async: true,
                                url: "/" + value['controller'] + "/getLastPull/",
                                datatype: "json",
                                success: function (response) {
                                    table.updateData([{ id: value['id'], lastPull: response }])
                                    $.ajax({
                                        type: 'GET',
                                        url: "/" + value['controller'] + "/getItemsToVerifyCount/",
                                        datatype: "json",
                                        success: function (response) {
                                            table.updateData([{ id: value['id'], itemsToVerify: response }]);
                                        }
                                    });
                                }
                            });
                        }

                    }
                });
            })
        }


        function nullDateFormatter(cell, formatterParams, onRendered) {
            if (cell.getValue() == null) { return "Нет"; }
            else { return cell.getValue(); }
        }

        function itemsToVerifyFormatter(cell, formatterParams, onRendered) {
            if (cell.getValue() == 0) {
                cell.getElement().style.color = "black";
            }
            else {
                cell.getElement().style.color = "red";
            }
            return cell.getValue();
        }

        function enableButtons() {
            $('#btnView').removeAttr('disabled');
            $('#btnShowSettings').removeAttr('disabled');
            $('#btnPull').removeAttr('disabled');
            $('#btnDownloadXLS').removeAttr('disabled');
        }

        function disableButtons() {
            $('#btnView').prop('disabled', true);
            $('#btnShowSettings').prop('disabled', true);
            $('#btnPull').prop('disabled', true);
            $('#btnDownloadXLS').prop('disabled', true);
        }

        $('#btnView').on('click', function () {
            window.location = table.getSelectedData()[0].controller;
        })



        $('#btnPull').on('click', function () {
            var selRec = table.getSelectedData()[0];
            disableButtons();
            $.ajax({
                type: 'GET',
                async: true,
                url: "/" + selRec['controller'] + "/pull",
                success: function () {
                    $.ajax({
                        type: 'GET',
                        async: true,
                        url: "/" + selRec['controller'] + "/getLastPull/",
                        datatype: "json",
                        success: function (response) {
                            table.updateData([{ id: selRec['id'], lastPull: response }])
                        }
                    });
                },
                error: function () {
                    alert('Невозможно с соединиться с сервером поставщика');
                }
            })
        })


        $('#btnPullAll').on('click', function () {
            disableButtons();
            table.getData().forEach(function (value, index, array) {
                if (value['isPulling'] == false) {
                    $.ajax({
                        type: 'GET',
                        async: true,
                        url: "/" + value['controller'] + "/pull",
                        success: function () {
                        },
                        error: function () {
                            alert('Невозможно с соединиться с сервером поставщика');
                        }
                    })
                }
            })
        })

        $('#searchSkuModal').on('shown.bs.modal', function () {
            $('#inpSku').val("");
            $('#inpSku').focus();

        })

        $('#searchSkuModal').on('keypress', function (event) {
            var keycode = (event.keyCode ? event.keyCode : event.which);
            if (keycode == '13') {
                $('#btnStartSearchSku').click();
            }
        });

        $('#btnStartSearchSku').on('click', function () {
            var skuToFind = $('#inpSku').val();
            $.ajax({
                type: 'GET',
                async: true,
                url: "/findBySku/" + skuToFind,
                success: function (response) {
                    if (typeof response !== "undefined") {
                        $('#searchSkuModal').modal('hide');
                        window.location = response + "/" + skuToFind;
                    }
                    else {
                        alert('Товар с SKU "' + skuToFind + '" не найден');
                    }
                },
                error: function () {
                    alert('Товар с SKU "' + skuToFind + '" не найден');
                }
            })
        })

    </script>
}
